apiVersion: v2
name: test2-backend-staging
description: A Helm chart for test2 backend

type: application

version: 0.1.0

appVersion: "1.0"
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: test2-backend-staging
  namespace: argocd

spec:
  destination:
    server: {{ .Values.spec.destination.server }} 
    namespace: test2-backend-staging

  project: {{ .Values.spec.project }}

  source:
    path: charts/backend/test2
    repoURL: {{ .Values.spec.source.repoURL }}
    targetRevision: {{ .Values.spec.source.targetRevision }}

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: {{.Values.app.fullName}}-certificate
spec:
  dnsNames:
  - {{ .Values.host }}
  issuerRef:
    name: letsencrypt-{{ .Values.app.env }}
    kind: ClusterIssuer
  secretName: {{ .Values.app.fullName }}-certificateapiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.app.fullName }}-deployment
  labels:
    app: {{ .Values.app.fullName }}-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.app.fullName }}
  template:
    metadata:
      labels:
        app: {{ .Values.app.fullName }}
    spec:
      containers:
        - name:  {{ .Values.app.fullName }}    
          image: {{ .Values.container.image.registry }}/hwc9169/{{.Values.app.name}}-{{.Values.app.type}}:{{ .Values.container.image.version }}
          imagePullPolicy: Always
          ports:
            - containerPort: {{ .Values.container.port}}
apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: {{.Values.app.fullName}}-ingress

spec:
  virtualhost:
    fqdn: {{ .Values.host }}
    tls:
      secretName: {{ .Values.app.fullName }}-certificate

  routes:
  - conditions:
    - prefix: /
    {{if eq .Values.app.type &#34;staging&#34;}}
    permitInsecure: true  
    {{end}}
    services:
      - name: {{.Values.app}}-service
        port: 8080apiVersion: v1 
kind: Namespace 
metadata: 
  name: {{ .Values.app.fullName }}

apiVersion: v1
kind: Service
metadata:
  name: {{.Values.app.fullName}}-service
  labels:
    app: {{.Values.app.fullName}}-service
spec:
  type: ClusterIP
  selector:
    app: {{.Values.app.fullName}}
  ports:
    - name: http
      port: 8080
      targetPort: {{.Values.container.port}}
      protocol: TCP

app: 
  fullName: test2-backend-staging
  name: test2
  type: backend
  env: staging

container:
  port: 8080
  image:
    registry: registry.hub.docker.com
    version: latest


host: staging-api.xquare.app
